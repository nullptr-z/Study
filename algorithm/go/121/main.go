// 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

// 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

// 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

// 示例 1：

// 输入：[7,1,5,3,6,4]
// 输出：5
// 解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
//      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

package main

func main() {
	maxProfit([]int{7, 1, 5, 3, 6, 4})
}

func maxProfit(prices []int) int {
	// 我们需要始终唯一prices[0..i]之间的最小值(dp[0])
	// prices[0..i],随着 i 不停增加，出现的新的最大值，与最小值(dp[0])求差
	// dp[0]含义，prices[0..i]之间最小的那个数的相反数;
	// dp[1]含义， prices[0..i]之间最大收益，最终结果就是题解
	dp := []int{prices[0], 0} // [0..1]
	for _, p := range prices {
		dp[0] = min(dp[0], p)       // 维护最小值
		dp[1] = max(dp[1], p-dp[0]) // 求差值
	}

	return dp[1]
}
